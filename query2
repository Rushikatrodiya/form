"use client";

import React, { FC, useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { apiData } from "@/app/anime/api"; // adjust your path here
import FilterFields, { IFilter } from "@/app/component/FilterFields";
import TableData from "@/app/component/TableData";

export type IData = {
  data: {
    mal_id: string;
    title: string;
    rank: string;
    type: string;
    status: string;
  }[];
  pagination: {
    current_page: number;
    has_next_page: boolean;
    items: {
      count: number;
      total: number;
      per_page: number;
    };
    last_visible_page: number;
  };
};

const AnimeList: FC = () => {
  const [filterValues, setFilterValues] = useState<IFilter>({ type: "", title: "" });
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [rowsPerPage, setRowsPerPage] = useState<number>(5); // You can control this dynamically if needed

  // Fetch data using react-query
  const { data: allData, isLoading, error } = useQuery<IData>(
    ["animeData", filterValues, currentPage, rowsPerPage],
    () =>
      apiData(
        rowsPerPage,
        filterValues.type || null,
        filterValues.title || undefined,
        currentPage
      ),
    {
      keepPreviousData: true, // keeps old data while loading new data (better UX)
      staleTime: 1000 * 60 * 5, // cache data for 5 minutes
    }
  );

  const totalItem = allData?.pagination.items.total || 0;

  const handleFilterValues = (values: IFilter) => {
    setFilterValues(values);
    setCurrentPage(1); // reset page when filter changes
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleRowsChange = (rows: number) => {
    setRowsPerPage(rows);
    setCurrentPage(1); // reset page on rows change
  };

  if (error) {
    return <div>Error fetching data</div>;
  }

  return (
    <div className="mx-10">
      <FilterFields
        alldata={allData ?? { data: [], pagination: { current_page: 1, has_next_page: false, items: { count: 0, total: 0, per_page: 5 }, last_visible_page: 1 } }}
        totalItem={totalItem}
        setAllData={() => {}} // react-query handles state internally
        setLoading={() => {}} // react-query provides loading state
        row={rowsPerPage.toString()}
        currentPage={currentPage}
        OnFilter={handleFilterValues}
      />

      <TableData
        allData={allData}
        loading={isLoading}
        setAllData={() => {}} // not needed with react-query
        type={filterValues.type}
        title={filterValues.title}
        OnRow={handlePageChange}
        filterValues={filterValues}
      />
    </div>
  );
};

export default AnimeList;
